/*
 * Mlflow
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.11.3
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MlflowservicesearchrunsRequest {
    /// List of experiment IDs to search over.
    #[serde(rename = "experiment_ids", skip_serializing_if = "Option::is_none")]
    pub experiment_ids: Option<Vec<String>>,
    /// A filter expression over params, metrics, and tags, that allows returning a subset of runs. The syntax is a subset of SQL that supports ANDing together binary operations between a param, metric, or tag and a constant.  Example: ``metrics.rmse < 1 and params.model_class = 'LogisticRegression'``  You can select columns with special characters (hyphen, space, period, etc.) by using double quotes: ``metrics.\"model class\" = 'LinearRegression' and tags.\"user-name\" = 'Tomas'``  Supported operators are ``=``, ``!=``, ``>``, ``>=``, ``<``, and ``<=``.
    #[serde(rename = "filter", skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    #[serde(rename = "run_view_type", skip_serializing_if = "Option::is_none")]
    pub run_view_type: Option<models::Mlflowviewtype>,
    /// Maximum number of runs desired. If unspecified, defaults to 1000. All servers are guaranteed to support a `max_results` threshold of at least 50,000 but may support more. Callers of this endpoint are encouraged to pass max_results explicitly and leverage page_token to iterate through experiments.
    #[serde(rename = "max_results", skip_serializing_if = "Option::is_none")]
    pub max_results: Option<i32>,
    /// List of columns to be ordered by, including attributes, params, metrics, and tags with an optional \"DESC\" or \"ASC\" annotation, where \"ASC\" is the default. Example: [\"params.input DESC\", \"metrics.alpha ASC\", \"metrics.rmse\"] Tiebreaks are done by start_time DESC followed by run_id for runs with the same start time (and this is the default ordering criterion if order_by is not provided).
    #[serde(rename = "order_by", skip_serializing_if = "Option::is_none")]
    pub order_by: Option<Vec<String>>,
    /// 
    #[serde(rename = "page_token", skip_serializing_if = "Option::is_none")]
    pub page_token: Option<String>,
}

impl MlflowservicesearchrunsRequest {
    pub fn new() -> MlflowservicesearchrunsRequest {
        MlflowservicesearchrunsRequest {
            experiment_ids: None,
            filter: None,
            run_view_type: None,
            max_results: None,
            order_by: None,
            page_token: None,
        }
    }
}

